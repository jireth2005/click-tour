---
interface Props {
  placeId?: number;
  image?: string;
  title?: string;
  location?: string;
  rating?: number;
  description?: string;
  type?: string;
  videoUrl?: string;
}

interface Place {
  id: number;
  name: string;
  type: string;
  lat: number;
  lng: number;
  description: string;
  rating: number;
  image: string;
  videoUrl?: string;
}

interface PlaceData {
  image: string;
  title: string;
  location: string;
  rating: number;
  description: string;
  type: string;
  videoUrl?: string;
}

import { places } from '../../data';

const { placeId, image, title, location, rating, description, type = 'image', videoUrl } = Astro.props;

// Si se proporciona un ID de lugar, obtener los datos del archivo JSON
let placeData: PlaceData = {
  image: '',
  title: '',
  location: '',
  rating: 0,
  description: '',
  type: 'image',
  videoUrl: ''
};

if (placeId) {
  const place = places.find(p => p.id === placeId);
  if (place) {
    placeData = {
      image: place.image,
      title: place.name,
      location: place.name,
      rating: place.rating,
      description: place.description,
      type: place.type || 'image',
      videoUrl: (place as any).videoUrl
    };
  }
}

// Usar los datos del JSON o los props proporcionados
const displayImage = placeData.image || image;
const displayTitle = placeData.title || title;
const displayLocation = placeData.location || location;
const displayRating = placeData.rating || rating || 0;
const displayDescription = placeData.description || description;
const displayType = placeData.type || type;
const displayVideoUrl = placeData.videoUrl || videoUrl;

// Función para generar estrellas de calificación
const renderStars = (rating: number) => {
  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 >= 0.5;
  let stars = '';
  
  for (let i = 0; i < fullStars; i++) {
    stars += '★';
  }
  
  if (hasHalfStar) {
    stars += '★';
  }
  
  const emptyStars = 5 - stars.length;
  for (let i = 0; i < emptyStars; i++) {
    stars += '☆';
  }
  
  return stars;
};
---

<div class="bg-white rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow fade-in">
  <div class="relative">
    <img src={displayImage} alt={displayTitle} class="w-full h-40 object-cover">
    
    {displayType === 'video' && (
      <div class="absolute inset-0 flex items-center justify-center video-play-button" data-video-url={displayVideoUrl}>
        <div class="bg-black bg-opacity-40 rounded-full p-2 cursor-pointer hover:bg-opacity-60 transition-all">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
      </div>
    )}
    
    <div class="absolute top-2 right-2 bg-white/90 rounded-full px-2 py-1 text-xs font-medium text-primary">
      <span class="text-yellow-500">{renderStars(displayRating)}</span> 
      <span class="ml-1">{displayRating}</span>
    </div>
  </div>
  
  <div class="p-4">
    <div class="flex items-center mb-1">
      <h3 class="font-semibold text-lg text-primary">{displayTitle}</h3>
      {displayType === 'video' && (
        <span class="ml-2 text-xs bg-red-500 text-white px-1.5 py-0.5 rounded">VIDEO</span>
      )}
    </div>
    
    <p class="text-xs text-gray-500 flex items-center mb-2">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
      </svg>
      {displayLocation}
    </p>
    
    {displayDescription && (
      <p class="text-sm text-gray-600 mb-3 line-clamp-2">{displayDescription}</p>
    )}
    
    <div class="flex justify-between items-center">
      <button class="text-primary text-sm font-medium">Ver detalles</button>
      <button class="text-gray-500 hover:text-primary">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
        </svg>
      </button>
    </div>
  </div>
</div> 