---
// Componente para mostrar destinos con tipo "video"
const { destination } = Astro.props;
---

<div class="bg-white rounded-lg overflow-hidden shadow-sm video-destination-card">
  <div class="relative h-32">
    <!-- Imagen de vista previa (mostrada inicialmente) -->
    <img 
      src={destination.image} 
      alt={destination.title} 
      class="w-full h-full object-cover video-thumbnail"
    >
    
    <!-- Video player (oculto inicialmente) -->
    <video 
      class="w-full h-full object-cover video-player hidden" 
      controls
      preload="metadata"
      data-video-url={destination.videoUrl}
    >
      <source src={destination.videoUrl} type="video/mp4">
      Tu navegador no soporta videos HTML5.
    </video>
    
    <!-- Indicador de video y botón de reproducción -->
    <div class="absolute inset-0 flex items-center justify-center video-play-overlay cursor-pointer">
      <div class="bg-black bg-opacity-40 rounded-full p-2 hover:bg-opacity-60 transition-all">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
    </div>
    
    <!-- Rating badge -->
    <div class="absolute bottom-2 right-2 bg-white rounded-full px-2 py-1 flex items-center shadow-sm">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-yellow-500" viewBox="0 0 20 20" fill="currentColor">
        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
      </svg>
      <span class="text-xs font-medium ml-1">{destination.rating}</span>
    </div>
  </div>
  
  <div class="p-3">
    <div class="flex items-center">
      <h3 class="font-semibold text-primary">{destination.title}</h3>
      <span class="ml-2 text-xs bg-red-500 text-white px-1.5 py-0.5 rounded">VIDEO</span>
    </div>
    <p class="text-xs text-gray-500">{destination.location}</p>
  </div>
</div>

<script>
  // Funcionalidad para reproducir videos inline
  document.addEventListener('DOMContentLoaded', function() {
    const videoCards = document.querySelectorAll('.video-destination-card');
    
    videoCards.forEach(card => {
      const playOverlay = card.querySelector('.video-play-overlay') as HTMLElement;
      const thumbnail = card.querySelector('.video-thumbnail') as HTMLImageElement;
      const videoPlayer = card.querySelector('.video-player') as HTMLVideoElement;
      
      // Verificar que todos los elementos existan
      if (!playOverlay || !thumbnail || !videoPlayer) {
        console.warn('Elementos del video card no encontrados');
        return;
      }
      
      const videoUrl = videoPlayer.getAttribute('data-video-url');
      
      // Establecer la URL del video
      if (videoUrl) {
        videoPlayer.src = videoUrl;
      }
      
      // Manejar click en el overlay de play
      playOverlay.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        // Ocultar thumbnail y overlay
        thumbnail.classList.add('hidden');
        playOverlay.classList.add('hidden');
        
        // Mostrar y reproducir video
        videoPlayer.classList.remove('hidden');
        videoPlayer.play().catch(error => {
          console.error('Error al reproducir el video:', error);
        });
      });
      
      // Volver a mostrar thumbnail cuando el video termine
      videoPlayer.addEventListener('ended', function() {
        thumbnail.classList.remove('hidden');
        playOverlay.classList.remove('hidden');
        videoPlayer.classList.add('hidden');
        videoPlayer.currentTime = 0; // Reiniciar al inicio
      });
      
      // Manejar errores de video
      videoPlayer.addEventListener('error', function(e) {
        console.error('Error en el video:', e);
        // Volver a mostrar la imagen si hay error
        thumbnail.classList.remove('hidden');
        playOverlay.classList.remove('hidden');
        videoPlayer.classList.add('hidden');
      });
      
      // Pausar video al hacer click fuera (opcional)
      videoPlayer.addEventListener('click', function(e) {
        e.stopPropagation();
      });
    });
  });
</script>

<style>
  /* Estilos adicionales para mejorar la experiencia */
  .video-destination-card .video-player {
    transition: opacity 0.3s ease;
  }
  
  /* Asegurar que los controles del video sean visibles */
  .video-destination-card .video-player::-webkit-media-controls {
    display: flex !important;
  }
  
  .video-destination-card .video-player::-webkit-media-controls-panel {
    background-color: rgba(0, 0, 0, 0.1);
  }
  
  /* Hover effect en el play button */
  .video-play-overlay:hover .bg-black {
    transform: scale(1.1);
  }
</style> 