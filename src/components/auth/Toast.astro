<div id="toast-container" class="fixed top-4 right-4 z-50 flex flex-col gap-2 max-w-xs w-full opacity-0 transition-all duration-300"></div>

<script>
  // Crear el contenedor de toast si no existe
  document.addEventListener('DOMContentLoaded', () => {
    const toastContainer = document.getElementById('toast-container');
    
    // Función para crear y mostrar un toast
    function showToast(type: 'success' | 'error', message: string) {
      if (!toastContainer) return;
      
      console.log(`Mostrando toast: ${type} - ${message}`);
      
      // Crear el elemento toast
      const toast = document.createElement('div');
      toast.className = `p-4 rounded-lg shadow-lg flex items-center justify-between transform transition-all duration-300 ${
        type === 'success' ? 'bg-green-100 text-green-800 border-l-4 border-green-500' : 'bg-red-100 text-red-800 border-l-4 border-red-500'
      }`;
      toast.style.transform = 'translateX(100%)';
      
      // Icono según el tipo
      const iconSvg = type === 'success' 
        ? '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" /></svg>'
        : '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" /></svg>';
      
      // Contenido del toast
      toast.innerHTML = `
        <div class="flex items-center">
          <div class="mr-2">${iconSvg}</div>
          <div class="font-medium">${message}</div>
        </div>
        <button class="ml-4 text-gray-500 hover:text-gray-700 focus:outline-none">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      `;
      
      // Agregar el toast al contenedor
      toastContainer.appendChild(toast);
      toastContainer.style.opacity = '1';
      
      // Animar la entrada del toast
      setTimeout(() => {
        toast.style.transform = 'translateX(0)';
      }, 10);
      
      // Configurar el botón de cierre
      const closeButton = toast.querySelector('button');
      closeButton?.addEventListener('click', () => {
        toast.style.transform = 'translateX(100%)';
        toast.style.opacity = '0';
        setTimeout(() => {
          toast.remove();
          if (toastContainer.children.length === 0) {
            toastContainer.style.opacity = '0';
          }
        }, 300);
      });
      
      // Auto cerrar después de 5 segundos (o 1.5 segundos si es éxito para coincidir con la redirección)
      const autoCloseTime = type === 'success' ? 1500 : 5000;
      setTimeout(() => {
        toast.style.transform = 'translateX(100%)';
        toast.style.opacity = '0';
        setTimeout(() => {
          toast.remove();
          if (toastContainer.children.length === 0) {
            toastContainer.style.opacity = '0';
          }
        }, 300);
      }, autoCloseTime);
    }
    
    // Escuchar eventos de mensajes de autenticación
    document.addEventListener('auth:message', (e: Event) => {
      const customEvent = e as CustomEvent;
      const { type, message } = customEvent.detail;
      showToast(type, message);
    });
  });
</script>

<style>
  #toast-container > div {
    transition: all 0.3s ease;
  }
</style> 