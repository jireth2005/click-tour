---
import '../styles/global.css';
import Header from '../components/Header.astro';

interface Props {
	title: string;
	showNavbar?: boolean;
	showHeader?: boolean;
}

const { title, showNavbar = true, showHeader = true } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Tour Click - A un click de tu próxima aventura" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="min-h-screen flex flex-col">
		{showHeader && <Header title={title} />}
		
		<slot />
		
		{showNavbar && (
			<nav class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 py-2 px-4 flex justify-around items-center z-10">
				<a href="/" class={`nav-item ${Astro.url.pathname === '/' ? 'active' : ''}`}>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
					</svg>
					<span>Inicio</span>
				</a>
				<a href="/mapa" class={`nav-item ${Astro.url.pathname === '/mapa' ? 'active' : ''}`}>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
					</svg>
					<span>Mapa</span>
				</a>
				<a href="/explorar" class={`nav-item ${Astro.url.pathname === '/explorar' ? 'active' : ''}`}>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
					</svg>
					<span>Explorar</span>
				</a>
				<a href="/perfil" class={`nav-item ${Astro.url.pathname === '/perfil' ? 'active' : ''}`}>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
					</svg>
					<span>Perfil</span>
				</a>
			</nav>
		)}
		
		<!-- Modal compartido para reproducir videos -->
		<div id="global-video-modal" class="video-modal fixed inset-0 hidden z-50 flex items-center justify-center bg-black bg-opacity-75">
			<div class="relative w-full max-w-4xl mx-4">
				<button class="absolute -top-10 right-0 text-white hover:text-gray-300 focus:outline-none close-video-modal">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
					</svg>
				</button>
				<div class="video-container relative w-full pt-[56.25%] bg-black">
					<video class="absolute inset-0 w-full h-full" controls>
						<source src="" type="video/mp4">
						Tu navegador no soporta la reproducción de videos.
					</video>
				</div>
			</div>
		</div>
		
		<script>
			// Script global para manejar la reproducción de videos
			document.addEventListener('DOMContentLoaded', () => {
				const videoModal = document.getElementById('global-video-modal');
				const videoElement = videoModal?.querySelector('video');
				const closeButton = videoModal?.querySelector('.close-video-modal');
				
				// Delegación de eventos para botones de video
				document.body.addEventListener('click', (e) => {
					const target = e.target as Element;
					const button = target.closest('.video-play-button');
					
					if (button && videoModal && videoElement) {
						const videoUrl = button.getAttribute('data-video-url');
						if (videoUrl) {
							// Establecer la fuente del video
							const videoSource = videoElement.querySelector('source');
							if (videoSource) {
								videoSource.src = videoUrl;
								videoElement.load();
								
								// Mostrar el modal
								videoModal.classList.remove('hidden');
								
								// Reproducir el video
								videoElement.play();
							}
						}
					}
				});
				
				// Cerrar el modal
				if (closeButton && videoModal && videoElement) {
					closeButton.addEventListener('click', () => {
						videoModal.classList.add('hidden');
						videoElement.pause();
					});
					
					// También cerrar al hacer clic fuera del video
					videoModal.addEventListener('click', (e) => {
						if (e.target === videoModal) {
							videoModal.classList.add('hidden');
							videoElement.pause();
						}
					});
				}
			});
		</script>
	</body>
</html> 