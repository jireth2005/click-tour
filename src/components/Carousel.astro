---
interface Slide {
  title: string;
  description: string;
  image: string;
  buttonText: string;
}

interface Props {
  slides: Slide[];
}

const { slides } = Astro.props;
---

<div class="carousel-container relative overflow-hidden mb-6">
  <div class="carousel-slides flex transition-transform duration-300 ease-in-out">
    {slides.map((slide, index) => (
      <div class="carousel-slide min-w-full relative">
        <div class="h-64 relative">
          <img src={slide.image} alt={slide.title} class="w-full h-full object-cover">
          <div class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent"></div>
          <div class="absolute bottom-0 left-0 right-0 p-6 text-white">
            <h2 class="text-2xl font-bold mb-2">{slide.title}</h2>
            <p class="text-sm mb-4">{slide.description}</p>
            <button class="bg-primary text-white px-4 py-2 rounded-full text-sm font-medium">
              {slide.buttonText}
            </button>
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <div class="carousel-dots absolute bottom-2 left-0 right-0 flex justify-center space-x-2">
    {slides.map((_, index) => (
      <button class="carousel-dot w-2 h-2 rounded-full bg-white/50 transition-all" data-index={index}></button>
    ))}
  </div>
  
  <button class="carousel-nav carousel-prev absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/20 backdrop-blur-sm rounded-full p-1 text-white">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  <button class="carousel-nav carousel-next absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/20 backdrop-blur-sm rounded-full p-1 text-white">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </button>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.querySelector('.carousel-slides') as HTMLElement;
    const slides = document.querySelectorAll('.carousel-slide');
    const dots = document.querySelectorAll('.carousel-dot');
    const prevBtn = document.querySelector('.carousel-prev');
    const nextBtn = document.querySelector('.carousel-next');
    
    if (!carousel || !slides.length || !dots.length || !prevBtn || !nextBtn) return;
    
    let currentIndex = 0;
    const slideCount = slides.length;
    
    // Marcar el primer punto como activo
    dots[0].classList.add('bg-white', 'w-4');
    
    // Función para mostrar un slide específico
    const showSlide = (index: number) => {
      if (index < 0) index = slideCount - 1;
      if (index >= slideCount) index = 0;
      
      currentIndex = index;
      const offset = -currentIndex * 100;
      carousel.style.transform = `translateX(${offset}%)`;
      
      // Actualizar los puntos indicadores
      dots.forEach((dot, i) => {
        if (i === currentIndex) {
          dot.classList.add('bg-white', 'w-4');
          dot.classList.remove('bg-white/50');
        } else {
          dot.classList.add('bg-white/50');
          dot.classList.remove('bg-white', 'w-4');
        }
      });
    };
    
    // Event listeners para los botones de navegación
    prevBtn.addEventListener('click', () => {
      showSlide(currentIndex - 1);
    });
    
    nextBtn.addEventListener('click', () => {
      showSlide(currentIndex + 1);
    });
    
    // Event listeners para los puntos indicadores
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        showSlide(index);
      });
    });
    
    // Autoplay
    let autoplayInterval = setInterval(() => {
      showSlide(currentIndex + 1);
    }, 5000);
    
    // Pausar autoplay al interactuar
    const pauseAutoplay = () => {
      clearInterval(autoplayInterval);
      autoplayInterval = setInterval(() => {
        showSlide(currentIndex + 1);
      }, 5000);
    };
    
    prevBtn.addEventListener('click', pauseAutoplay);
    nextBtn.addEventListener('click', pauseAutoplay);
    dots.forEach(dot => dot.addEventListener('click', pauseAutoplay));
    
    // Soporte para deslizamiento táctil
    let touchStartX = 0;
    let touchEndX = 0;
    
    const handleSwipe = () => {
      const diff = touchStartX - touchEndX;
      if (Math.abs(diff) > 50) { // Umbral mínimo para considerar un deslizamiento
        if (diff > 0) {
          // Deslizamiento hacia la izquierda (siguiente slide)
          showSlide(currentIndex + 1);
        } else {
          // Deslizamiento hacia la derecha (slide anterior)
          showSlide(currentIndex - 1);
        }
        pauseAutoplay();
      }
    };
    
    carousel.addEventListener('touchstart', (e: TouchEvent) => {
      touchStartX = e.changedTouches[0].screenX;
    }, { passive: true });
    
    carousel.addEventListener('touchend', (e: TouchEvent) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }, { passive: true });
  });
</script> 